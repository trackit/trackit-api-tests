{
	"info": {
		"_postman_id": "897f581f-ea69-4549-a486-2f6582376573",
		"name": "trackit-test",
		"description": "This is the testing suite for trackit API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "success_tests",
			"item": [
				{
					"name": "/user/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd5690f5-34bb-4e1b-be77-29d67eb96f3f",
								"exec": [
									"function setEnvForTest(token) {",
									"    var moment = require('moment');",
									"    // Saving token for future requests",
									"    pm.environment.set(\"token\", token);",
									"    // Setting dates for future requests",
									"    var shortBeginDate = moment().subtract(1, 'month');",
									"    shortBeginDate.date(1);",
									"    var longBeginDate = moment().subtract(4, 'month');",
									"    longBeginDate.date(1);",
									"    var endDate = moment().subtract(1, 'month').endOf('month');",
									"    var thisMonthDate = moment();",
									"    thisMonthDate.date(1);",
									"",
									"    pm.environment.set(\"shortBeginDate\", shortBeginDate.format('YYYY-MM-DD'));",
									"    pm.environment.set(\"longBeginDate\", longBeginDate.format('YYYY-MM-DD'));",
									"    pm.environment.set(\"endDate\", endDate.format('YYYY-MM-DD'));",
									"    pm.environment.set(\"thisMonthDate\", thisMonthDate.format('YYYY-MM-DD'));",
									"}",
									"",
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response should contain user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.not.be.undefined;",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"",
									"});",
									"",
									"pm.test(\"response should have a valid token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token.length).to.be.gt(200);",
									"    setEnvForTest(jsonData.token)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{username}}\",\n\t\"password\":\"{{password}}\",\n\t\"awsToken\":null\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/user/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/aws/status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e6b29e-1bc5-421a-9a86-c3d305236757",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response returns trackit AWS account\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.gt(0);",
									"    pm.expect(jsonData[0].pretty).to.eql('TrackIt');",
									"});",
									"",
									"pm.test(\"trackit AWS account has a bill repository\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].billRepositories).lengthOf(1);",
									"});",
									"",
									"pm.test(\"trackit AWS account bill repository is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    var repo = jsonData[0].billRepositories[0];",
									"    pm.expect(repo.error.length).to.eql(0);",
									"    pm.expect(repo.status.value).to.eql(\"ok\");",
									"});",
									"",
									"pm.test(\"trackit AWS account returns sub accounts\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].subAccounts.length).to.be.gt(0);",
									"});",
									"",
									"pm.test(\"trackit AWS account sub accounts have names\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].subAccounts[0].pretty.length).to.be.gt(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/aws/status",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"aws",
								"status"
							]
						},
						"description": "List AWS accounts and their statuses."
					},
					"response": []
				},
				{
					"name": "/costs by=month",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ea60e24-98b7-43be-b7f9-fe3a6ea30d24",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"month value is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.month).to.exist;",
									"});",
									"",
									"pm.test(\"response contains a value for the last 4 months\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData.month)).to.have.lengthOf(4);",
									"});",
									"",
									"pm.test(\"response contains no $0 total over the last 4 months\", function () {",
									"    var jsonData = pm.response.json();",
									"    var months = jsonData.month;",
									"    for (var month in months) {",
									"        if(months.hasOwnProperty(month)) {",
									"            pm.expect(months[month]).to.not.eql(0);",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/costs?begin={{longBeginDate}}&end={{endDate}}&by=month",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"costs"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{longBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								},
								{
									"key": "by",
									"value": "month"
								}
							]
						},
						"description": "Get costs by month"
					},
					"response": []
				},
				{
					"name": "/tagging/compliance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8566542c-836a-4916-bc37-569f9fc58da1",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains at least one value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.above(0);",
									"});",
									"",
									"pm.test(\"response contains most used tags ids\", function () {",
									"    var jsonData = pm.response.json();",
									"    Object.keys(jsonData).forEach((key) => {",
									"        pm.expect(jsonData[key].mostUsedTagsId).to.not.be.an('undefined');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"response contains numbers that sums up\", function () {",
									"    var jsonData = pm.response.json();",
									"    Object.keys(jsonData).forEach((key) => {",
									"        const calculatedTotal = jsonData[key].totallyTagged + jsonData[key].partiallyTagged + jsonData[key].notTagged;",
									"        pm.expect(jsonData[key].total).to.equal(calculatedTotal);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tagging/compliance?begin={{longBeginDate}}&end={{endDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tagging",
								"compliance"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{longBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								}
							]
						},
						"description": "Get compliance data"
					},
					"response": []
				},
				{
					"name": "/tagging/mostusedtags",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d60444fe-e32e-4cf0-ad04-aed29473aa97",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"reportDate value is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.reportDate).to.exist;",
									"});",
									"",
									"pm.test(\"response contains at least one tag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.mostUsedTags).to.have.lengthOf.above(0);",
									"});",
									"",
									"pm.test(\"response contains five tags\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.mostUsedTags).to.have.lengthOf(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tagging/mostusedtags",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tagging",
								"mostusedtags"
							]
						},
						"description": "Get latest most used tags"
					},
					"response": []
				},
				{
					"name": "/tagging/resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69590933-2a7d-400e-b50c-556e836d4134",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains at least one resource\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});",
									"",
									"pm.test(\"response contains only one report date\", function () {",
									"    var jsonData = pm.response.json();",
									"    var reportDate = null;",
									"",
									"    jsonData.forEach((resource) => {",
									"        if (reportDate == null)",
									"            reportDate = resource.reportDate;",
									"        pm.expect(reportDate).to.equal(resource.reportDate);",
									"    });",
									"});",
									"",
									"pm.test(\"response contains only complete data\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    jsonData.forEach((resource) => {",
									"        pm.expect(resource.account).to.have.lengthOf.above(0);",
									"        pm.expect(resource.reportDate).to.have.lengthOf.above(0);",
									"        pm.expect(resource.resourceId).to.have.lengthOf.above(0);",
									"        pm.expect(resource.resourceType).to.have.lengthOf.above(0);",
									"        pm.expect(resource.region).to.have.lengthOf.above(0);",
									"        pm.expect(resource.url).to.have.lengthOf.above(0);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tagging/resources",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tagging",
								"resources"
							]
						},
						"description": "Get resources list of the latest tagging report"
					},
					"response": []
				},
				{
					"name": "/costs/tags/keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86ffe3b1-3821-45a7-a52a-5e56eb630991",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains tags keys\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});",
									"",
									"pm.test(\"response contains key for future calls\", function () {",
									"    var jsonData = pm.response.json();",
									"    var key = pm.environment.get(\"tagKey\");",
									"    pm.expect(jsonData.indexOf(key)).to.not.eql(-1);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/costs/tags/keys?begin={{longBeginDate}}&end={{endDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"costs",
								"tags",
								"keys"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{longBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								}
							]
						},
						"description": "Get tags keys"
					},
					"response": []
				},
				{
					"name": "/costs/tags/values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "438f250c-d6bb-48e9-af28-55326106aa45",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"tag key value is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    var key = pm.environment.get(\"tagKey\");",
									"    pm.expect(jsonData[key]).to.exist;",
									"});",
									"",
									"pm.test(\"response contains values for the specified key\", function () {",
									"    var jsonData = pm.response.json();",
									"    var key = pm.environment.get(\"tagKey\");",
									"    pm.expect(jsonData[key]).to.have.lengthOf.above(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/costs/tags/values?begin={{longBeginDate}}&end={{endDate}}&keys={{tagKey}}&by=month&detailed=false",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"costs",
								"tags",
								"values"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{longBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								},
								{
									"key": "keys",
									"value": "{{tagKey}}"
								},
								{
									"key": "by",
									"value": "month"
								},
								{
									"key": "detailed",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/costs/anomalies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27549167-9a7a-4934-90e8-c7256cde6c9e",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response does not contain an error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/costs/anomalies?begin={{shortBeginDate}}&end={{endDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"costs",
								"anomalies"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{shortBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/ec2/unused",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "532643ad-e504-4e3b-9aad-c4cc7f2c553a",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response does not contain an error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/ec2/unused?date={{thisMonthDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ec2",
								"unused"
							],
							"query": [
								{
									"key": "date",
									"value": "{{thisMonthDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/ec2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27e4120b-b9a6-4337-9779-a8fc63e532a1",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains data and no error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/ec2?date={{shortBeginDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"ec2"
							],
							"query": [
								{
									"key": "date",
									"value": "{{shortBeginDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/rds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "452fcd68-86ca-4d54-aa2d-2ca397a9c70f",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains data and no error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/rds?date={{shortBeginDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"rds"
							],
							"query": [
								{
									"key": "date",
									"value": "{{shortBeginDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/es",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7ca03a-c72d-46b0-8d5d-25636a0fed5b",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains data and no error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/es?date={{shortBeginDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"es"
							],
							"query": [
								{
									"key": "date",
									"value": "{{shortBeginDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/lambda",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "656a58f9-388b-482f-944a-fd0f63c67972",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains data and no error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/lambda?date={{shortBeginDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"lambda"
							],
							"query": [
								{
									"key": "date",
									"value": "{{shortBeginDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/elasticache",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52a3b005-17a0-4a11-b5b2-5096186ec2db",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/elasticache?date={{shortBeginDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"elasticache"
							],
							"query": [
								{
									"key": "date",
									"value": "{{shortBeginDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/plugins/results",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e48e1b4-97dd-4db8-93e7-5193cae43e6b",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains data and no error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"    pm.expect(jsonData).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/plugins/results",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"plugins",
								"results"
							]
						}
					},
					"response": []
				},
				{
					"name": "/s3/costs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e5eb8d3-6493-4fa1-a522-0902f972e7c8",
								"exec": [
									"pm.test(\"response time is correct\", function () {",
									"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
									"});",
									"",
									"pm.test(\"response contains data and no error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.exist;",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/s3/costs?begin={{shortBeginDate}}&end={{endDate}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"s3",
								"costs"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{shortBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "55e79794-2381-420e-a3a9-80f60b02979f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "239a6baf-f4ea-4d4b-951f-89e2b6c7c292",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "no_auth_tests",
			"item": [
				{
					"name": "NOAUTH /user/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d44a4c6b-5ab8-4028-8f5b-3bcd2faa963f",
								"exec": [
									"pm.test(\"response should not contain user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.be.undefined;",
									"",
									"});",
									"",
									"pm.test(\"response should not have a valid token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.undefined;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"badUsername\",\n\t\"password\":\"badPassword\",\n\t\"awsToken\":null\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/user/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NOAUTH /aws/status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d894b256-b2a4-4474-8131-e740b9b8c09b",
								"exec": [
									"pm.test(\"response does not return trackit AWS account\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.not.exist;",
									"    pm.expect(jsonData.error).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiUrl}}/aws/status",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"aws",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "NOAUTH /costs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a3f36df-eee8-44e7-a899-3effd2c6cb9f",
								"exec": [
									"pm.test(\"response does not return costs to non-authenticated user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.not.exist;",
									"    pm.expect(jsonData.error).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiUrl}}/costs?begin={{longBeginDate}}&end={{endDate}}&by=month",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"costs"
							],
							"query": [
								{
									"key": "begin",
									"value": "{{longBeginDate}}"
								},
								{
									"key": "end",
									"value": "{{endDate}}"
								},
								{
									"key": "by",
									"value": "month"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "These tests make sure that the endpoints are not returning data to non authenticated users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ad13040c-1186-47e4-a708-f8949c742761",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "52443305-7289-4ce1-a8c0-67b54e6409f8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response is ok (forbidden)\", function () {",
							"    pm.expect(pm.response.code).to.be.within(401, 403);",
							"});",
							"",
							"pm.test(\"response time is correct\", function () {",
							"    var responseTime = parseInt(pm.environment.get(\"shortResponseTime\"));",
							"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
							"});",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}